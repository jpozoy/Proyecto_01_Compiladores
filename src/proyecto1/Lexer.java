// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/proyecto1/scanner.flex

package proyecto1;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\2\0"+
    "\1\4\3\0\1\5\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\11\16\7\0\32\17\4\0"+
    "\1\20\1\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\2\17\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\12\0\1\3\u01da\0\12\51\206\0"+
    "\12\51\306\0\12\51\234\0\12\51\166\0\12\51\140\0"+
    "\12\51\166\0\12\51\106\0\12\51\u0116\0\12\51\106\0"+
    "\12\51\u0146\0\12\51\46\0\12\51\u012c\0\12\51\200\0"+
    "\12\51\246\0\12\51\6\0\12\51\266\0\12\51\126\0"+
    "\12\51\206\0\12\51\6\0\12\51\316\0\2\3\u01a6\0"+
    "\12\51\46\0\12\51\306\0\12\51\26\0\12\51\126\0"+
    "\12\51\u0196\0\12\51\6\0\u0100\3\240\0\12\51\206\0"+
    "\12\51\u012c\0\12\51\200\0\12\51\74\0\12\51\220\0"+
    "\12\51\166\0\12\51\146\0\12\51\206\0\12\51\106\0"+
    "\12\51\266\0\12\51\u0164\0\62\51\100\0\12\51\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\2\1\2\4\23\1"+
    "\3\0\2\5\45\0\1\6\4\0\1\2\47\0\1\7"+
    "\1\10\12\0\1\11\10\0\1\12\3\0\1\13\7\0"+
    "\1\14\4\0\1\15\14\0\1\16\3\0\1\17\2\0"+
    "\1\15\5\0\1\20\2\0\1\21\3\0\1\22\1\23"+
    "\1\0\1\24\15\0\1\25\1\26\1\27\4\0\1\30"+
    "\1\31\11\0\1\32\1\33\1\0\1\34\12\0\1\35"+
    "\5\0\1\36\1\37\1\40\2\0\1\41\1\0\1\42"+
    "\1\43\3\0\1\44\1\45\1\46\3\0\1\47\2\0"+
    "\1\50\2\0\1\51\1\52\6\0\1\53\1\54\2\0"+
    "\1\55\1\0\1\56\4\0\1\57\1\60\3\0\1\61"+
    "\1\62\1\0\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\52"+
    "\0\u0126\0\u0150\0\374\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2"+
    "\0\u04ec\0\u0150\0\374\0\u0150\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\52\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0540\0\u0bd0"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70"+
    "\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0"+
    "\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c\0\52\0\u0b7c"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\52\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\52\0\u152a\0\u1554\0\u157e\0\52"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\52"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4"+
    "\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944"+
    "\0\u196e\0\52\0\u1998\0\u19c2\0\u19ec\0\52\0\u1a16\0\u1a40"+
    "\0\52\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\52\0\u1b3c"+
    "\0\u1b66\0\52\0\u1b90\0\u1bba\0\u1be4\0\52\0\52\0\u1c0e"+
    "\0\52\0\u1c38\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34"+
    "\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\52\0\52"+
    "\0\52\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\52\0\52\0\u1f02"+
    "\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028\0\u2052"+
    "\0\52\0\52\0\u207c\0\52\0\u20a6\0\u20d0\0\u20fa\0\u2124"+
    "\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\52\0\u224a"+
    "\0\u2274\0\u229e\0\u22c8\0\u22f2\0\52\0\52\0\52\0\u231c"+
    "\0\u2346\0\52\0\u2370\0\52\0\u0b7c\0\u239a\0\u23c4\0\u23ee"+
    "\0\52\0\52\0\52\0\u2418\0\u2442\0\u246c\0\52\0\u2496"+
    "\0\u24c0\0\52\0\u24ea\0\u2514\0\52\0\52\0\u253e\0\u2568"+
    "\0\u2592\0\u25bc\0\u25e6\0\u2610\0\52\0\52\0\u263a\0\u2664"+
    "\0\52\0\u268e\0\52\0\u26b8\0\u26e2\0\u270c\0\u2736\0\52"+
    "\0\52\0\u2760\0\u278a\0\u27b4\0\52\0\52\0\u27de\0\52"+
    "\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\2\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\2\1\27\1\30\1\31\1\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\5\2\53\0\2\3\47\0"+
    "\2\4\2\0\46\4\2\40\2\0\46\40\13\0\1\41"+
    "\51\0\1\42\1\0\2\43\46\0\1\42\1\0\1\13"+
    "\1\14\50\0\2\44\46\0\1\42\1\0\2\14\33\0"+
    "\15\45\2\46\1\45\1\47\23\45\1\50\4\45\1\46"+
    "\22\0\1\51\1\0\1\52\46\0\1\53\16\0\1\54"+
    "\42\0\1\55\3\0\1\56\5\0\1\57\51\0\1\60"+
    "\40\0\1\61\1\0\1\62\7\0\1\63\26\0\1\64"+
    "\7\0\1\65\41\0\1\66\16\0\1\67\32\0\1\70"+
    "\7\0\1\71\54\0\1\72\36\0\1\73\3\0\1\74"+
    "\3\0\1\75\41\0\1\76\13\0\1\77\52\0\1\100"+
    "\56\0\1\101\33\0\1\102\7\0\1\103\45\0\1\104"+
    "\2\0\1\105\55\0\1\106\43\0\1\107\3\0\1\110"+
    "\34\0\1\111\35\0\1\112\53\0\1\113\42\0\15\46"+
    "\3\114\1\115\30\114\21\46\1\116\45\46\1\117\3\114"+
    "\1\115\30\114\16\46\3\114\1\115\4\114\1\120\23\114"+
    "\1\46\40\0\1\121\55\0\1\122\37\0\1\123\54\0"+
    "\1\124\41\0\1\125\57\0\1\126\4\0\1\127\47\0"+
    "\1\130\40\0\1\131\52\0\1\132\65\0\1\133\1\0"+
    "\1\134\32\0\1\135\56\0\1\136\53\0\1\137\56\0"+
    "\1\140\41\0\1\141\44\0\1\142\66\0\1\143\52\0"+
    "\1\144\36\0\1\145\10\0\1\146\43\0\1\147\53\0"+
    "\1\150\55\0\1\151\3\0\1\152\30\0\1\153\53\0"+
    "\1\154\55\0\1\155\41\0\1\156\25\0\1\157\26\0"+
    "\1\160\54\0\1\161\57\0\1\162\57\0\1\163\50\0"+
    "\1\164\30\0\1\165\70\0\1\166\21\0\1\167\41\0"+
    "\15\46\3\114\1\170\30\114\15\46\1\117\3\114\1\170"+
    "\30\114\15\46\1\117\3\46\1\116\46\46\3\114\1\170"+
    "\17\114\1\171\10\114\1\46\25\0\1\172\55\0\1\173"+
    "\62\0\1\174\42\0\1\175\56\0\1\176\36\0\1\177"+
    "\66\0\1\200\40\0\1\201\54\0\1\202\52\0\1\203"+
    "\54\0\1\204\42\0\1\205\11\0\1\206\46\0\1\207"+
    "\52\0\1\210\50\0\1\211\47\0\1\212\47\0\1\213"+
    "\36\0\1\214\72\0\1\215\34\0\1\216\61\0\1\217"+
    "\63\0\1\220\25\0\1\221\67\0\1\222\50\0\1\223"+
    "\42\0\1\224\50\0\1\225\55\0\1\226\42\0\1\227"+
    "\50\0\1\230\52\0\1\231\61\0\1\232\57\0\1\233"+
    "\53\0\1\234\31\0\1\235\55\0\1\236\62\0\1\237"+
    "\40\0\1\240\20\0\15\46\3\114\1\170\1\241\27\114"+
    "\1\46\23\0\1\242\1\0\1\243\12\0\1\244\36\0"+
    "\1\245\45\0\1\246\61\0\1\247\60\0\1\250\53\0"+
    "\1\251\30\0\1\252\54\0\1\253\51\0\1\254\52\0"+
    "\1\255\45\0\1\256\55\0\1\257\53\0\1\260\47\0"+
    "\1\261\51\0\1\262\45\0\1\263\53\0\1\264\63\0"+
    "\1\265\54\0\1\266\52\0\1\267\40\0\1\270\63\0"+
    "\1\271\30\0\1\272\54\0\1\273\52\0\1\274\65\0"+
    "\1\275\44\0\1\276\56\0\1\277\42\0\1\300\44\0"+
    "\1\301\46\0\1\302\63\0\1\303\50\0\1\304\56\0"+
    "\1\305\46\0\1\306\14\0\15\46\3\114\1\170\13\114"+
    "\1\307\14\114\1\46\43\0\1\310\41\0\1\311\43\0"+
    "\1\312\60\0\1\313\65\0\1\314\42\0\1\315\31\0"+
    "\1\316\51\0\1\317\65\0\1\320\41\0\1\321\53\0"+
    "\1\322\54\0\1\323\57\0\1\324\40\0\1\325\62\0"+
    "\1\326\41\0\1\327\61\0\1\330\34\0\1\331\63\0"+
    "\1\332\45\0\1\333\41\0\1\334\52\0\1\335\61\0"+
    "\1\336\45\0\1\337\44\0\1\340\65\0\1\341\51\0"+
    "\1\342\41\0\1\343\65\0\1\344\10\0\15\46\3\114"+
    "\1\170\14\114\1\345\13\114\1\46\25\0\1\346\62\0"+
    "\1\347\42\0\1\350\64\0\1\351\30\0\1\352\72\0"+
    "\1\353\32\0\1\354\1\0\1\355\12\0\1\356\32\0"+
    "\1\357\74\0\1\360\32\0\1\361\45\0\1\362\61\0"+
    "\1\363\41\0\1\364\70\0\1\365\57\0\1\366\27\0"+
    "\1\367\70\0\1\370\27\0\1\371\65\0\1\372\46\0"+
    "\1\373\44\0\1\374\24\0\15\46\3\114\1\375\30\114"+
    "\1\46\34\0\1\376\36\0\1\377\51\0\1\u0100\65\0"+
    "\1\u0101\54\0\1\u0102\32\0\1\u0103\73\0\1\u0104\41\0"+
    "\1\u0105\43\0\1\u0106\51\0\1\u0107\51\0\1\u0108\56\0"+
    "\1\u0109\40\0\1\u010a\63\0\1\u010b\43\0\1\u010c\51\0"+
    "\1\u010d\56\0\1\u010e\61\0\1\u010f\46\0\1\u0110\44\0"+
    "\1\u0111\44\0\1\u0112\62\0\1\u0113\42\0\1\u0114\56\0"+
    "\1\u0115\52\0\1\u0116\36\0\1\u0117\63\0\1\u0118\52\0"+
    "\1\u0119\57\0\1\u011a\43\0\1\u011b\50\0\1\u011c\36\0"+
    "\1\u011d\51\0\1\u011e\61\0\1\u011f\41\0\1\u0120\55\0"+
    "\1\u0121\66\0\1\u0122\46\0\1\u0123\44\0\1\u0124\54\0"+
    "\1\u0125\51\0\1\u0126\57\0\1\u0127\43\0\1\u0128\41\0"+
    "\1\u0129\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10248];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\27\1\3\0\2\1\45\0"+
    "\1\11\4\0\1\1\47\0\1\11\1\1\12\0\1\11"+
    "\10\0\1\11\3\0\1\11\7\0\1\11\4\0\1\1"+
    "\14\0\1\11\3\0\1\11\2\0\1\11\5\0\1\11"+
    "\2\0\1\11\3\0\2\11\1\0\1\11\15\0\3\11"+
    "\4\0\2\11\11\0\2\11\1\0\1\11\12\0\1\11"+
    "\5\0\3\11\2\0\1\11\1\0\1\11\1\1\3\0"+
    "\3\11\3\0\1\11\2\0\1\11\2\0\2\11\6\0"+
    "\2\11\2\0\1\11\1\0\1\11\4\0\2\11\3\0"+
    "\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(cup.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Caracter no reconocido: " + yytext() + " en linea: " + yyline);
            }
          // fall through
          case 53: break;
          case 2:
            { /* No hace nada */
            }
          // fall through
          case 54: break;
          case 3:
            { return symbol(sym.COMMA, ",");
            }
          // fall through
          case 55: break;
          case 4:
            { return symbol(sym.INTEGER_VAL, Integer.parseInt(yytext()));
            }
          // fall through
          case 56: break;
          case 5:
            { return symbol(sym.FLOAT_VAL, Double.parseDouble(yytext()));
            }
          // fall through
          case 57: break;
          case 6:
            { return symbol(sym.CHAR_VAL, yytext().charAt(1));
            }
          // fall through
          case 58: break;
          case 7:
            { return symbol(sym.STRING_VAL, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 59: break;
          case 8:
            { return symbol(sym.ID, yytext());
            }
          // fall through
          case 60: break;
          case 9:
            { return symbol(sym.IF, "elfo");
            }
          // fall through
          case 61: break;
          case 10:
            { return symbol(sym.ELSE, "hada");
            }
          // fall through
          case 62: break;
          case 11:
            { return symbol(sym.EQUAL_TO, "mary");
            }
          // fall through
          case 63: break;
          case 12:
            { return symbol(sym.INPUT, "read");
            }
          // fall through
          case 64: break;
          case 13:
            { return symbol(sym.BOOL_VAL, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 65: break;
          case 14:
            { return symbol(sym.BREAK, "corta");
            }
          // fall through
          case 66: break;
          case 15:
            { return symbol(sym.RETURN, "envia");
            }
          // fall through
          case 67: break;
          case 16:
            { return symbol(sym.MOD, "magos");
            }
          // fall through
          case 68: break;
          case 17:
            { return symbol(sym.PRINT, "narra");
            }
          // fall through
          case 69: break;
          case 18:
            { return symbol(sym.INCREMENT, "quien");
            }
          // fall through
          case 70: break;
          case 19:
            { return symbol(sym.DIV, "reyes");
            }
          // fall through
          case 71: break;
          case 20:
            { return symbol(sym.COLON, "sigue");
            }
          // fall through
          case 72: break;
          case 21:
            { return symbol(sym.STRING, "cometa");
            }
          // fall through
          case 73: break;
          case 22:
            { return symbol(sym.CHAR, "cupido");
            }
          // fall through
          case 74: break;
          case 23:
            { return symbol(sym.FOR, "duende");
            }
          // fall through
          case 75: break;
          case 24:
            { return symbol(sym.OR, "gaspar");
            }
          // fall through
          case 76: break;
          case 25:
            { return symbol(sym.DECREMENT, "grinch");
            }
          // fall through
          case 77: break;
          case 26:
            { return symbol(sym.BOOLEAN, "trueno");
            }
          // fall through
          case 78: break;
          case 27:
            { return symbol(sym.DEFAULT, "ultimo");
            }
          // fall through
          case 79: break;
          case 28:
            { return symbol(sym.SWITCH, "varios");
            }
          // fall through
          case 80: break;
          case 29:
            { return symbol(sym.ASSIGNMENT, "entrega");
            }
          // fall through
          case 81: break;
          case 30:
            { return symbol(sym.AND, "melchor");
            }
          // fall through
          case 82: break;
          case 31:
            { return symbol(sym.GREATER_THAN, "minstix");
            }
          // fall through
          case 83: break;
          case 32:
            { return symbol(sym.ADD, "navidad");
            }
          // fall through
          case 84: break;
          case 33:
            { return symbol(sym.INTEGER, "rodolfo");
            }
          // fall through
          case 85: break;
          case 34:
            { return symbol(sym.GREATER_OR_EQUAL_THAN, "upatree");
            }
          // fall through
          case 86: break;
          case 35:
            { return symbol(sym.MAIN, "_verano_");
            }
          // fall through
          case 87: break;
          case 36:
            { return symbol(sym.TO_THE_POWER, "adviento");
            }
          // fall through
          case 88: break;
          case 37:
            { return symbol(sym.NOT, "baltazar");
            }
          // fall through
          case 89: break;
          case 38:
            { return symbol(sym.FLOAT, "bromista");
            }
          // fall through
          case 90: break;
          case 39:
            { return symbol(sym.WHILE, "envuelve");
            }
          // fall through
          case 91: break;
          case 40:
            { return symbol(sym.CASE, "historia");
            }
          // fall through
          case 92: break;
          case 41:
            { return symbol(sym.NOT_EQUAL_TO, "openslae");
            }
          // fall through
          case 93: break;
          case 42:
            { return symbol(sym.LESS_THAN, "snowball");
            }
          // fall through
          case 94: break;
          case 43:
            { return symbol(sym.LESS_OR_EQUAL_THAN, "evergreen");
            }
          // fall through
          case 95: break;
          case 44:
            { return symbol(sym.SEMICOLON, "finregalo");
            }
          // fall through
          case 96: break;
          case 45:
            { return symbol(sym.LEFT_SQUARE_BRACKET, "abrecuento");
            }
          // fall through
          case 97: break;
          case 46:
            { return symbol(sym.LEFT_PARENTHESIS, "abreregalo");
            }
          // fall through
          case 98: break;
          case 47:
            { return symbol(sym.MUL, "nochebuena");
            }
          // fall through
          case 99: break;
          case 48:
            { return symbol(sym.LEFT_BRACE, "abreempaque");
            }
          // fall through
          case 100: break;
          case 49:
            { return symbol(sym.SUB, "intercambio");
            }
          // fall through
          case 101: break;
          case 50:
            { return symbol(sym.RIGHT_SQUARE_BRACKET, "cierracuento");
            }
          // fall through
          case 102: break;
          case 51:
            { return symbol(sym.RIGHT_PARENTHESIS, "cierraregalo");
            }
          // fall through
          case 103: break;
          case 52:
            { return symbol(sym.RIGHT_BRACE, "cierraempaque");
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
